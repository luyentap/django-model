[1mdiff --git a/Model/__pycache__/settings.cpython-36.pyc b/Model/__pycache__/settings.cpython-36.pyc[m
[1mindex 307d33f..602937a 100644[m
Binary files a/Model/__pycache__/settings.cpython-36.pyc and b/Model/__pycache__/settings.cpython-36.pyc differ
[1mdiff --git a/Model/settings.py b/Model/settings.py[m
[1mindex 2e07373..680d470 100644[m
[1m--- a/Model/settings.py[m
[1m+++ b/Model/settings.py[m
[36m@@ -32,6 +32,7 @@[m [mALLOWED_HOSTS = [][m
 [m
 INSTALLED_APPS = [[m
     'model1.apps.Model1Config',[m
[32m+[m[32m    'model2.apps.Model2Config',[m
     'practice.apps.PracticeConfig',[m
     'django.contrib.admin',[m
     'django.contrib.auth',[m
[1mdiff --git a/db.sqlite3 b/db.sqlite3[m
[1mindex 9a27274..6dbf41b 100644[m
Binary files a/db.sqlite3 and b/db.sqlite3 differ
[1mdiff --git a/practice/__pycache__/__init__.cpython-36.pyc b/practice/__pycache__/__init__.cpython-36.pyc[m
[1mindex 78d1468..ff46c88 100644[m
Binary files a/practice/__pycache__/__init__.cpython-36.pyc and b/practice/__pycache__/__init__.cpython-36.pyc differ
[1mdiff --git a/practice/__pycache__/admin.cpython-36.pyc b/practice/__pycache__/admin.cpython-36.pyc[m
[1mindex 38cefd4..0c493a9 100644[m
Binary files a/practice/__pycache__/admin.cpython-36.pyc and b/practice/__pycache__/admin.cpython-36.pyc differ
[1mdiff --git a/practice/__pycache__/apps.cpython-36.pyc b/practice/__pycache__/apps.cpython-36.pyc[m
[1mindex 627f370..f0617f1 100644[m
Binary files a/practice/__pycache__/apps.cpython-36.pyc and b/practice/__pycache__/apps.cpython-36.pyc differ
[1mdiff --git a/practice/__pycache__/models.cpython-36.pyc b/practice/__pycache__/models.cpython-36.pyc[m
[1mindex 97bc81f..52edcaf 100644[m
Binary files a/practice/__pycache__/models.cpython-36.pyc and b/practice/__pycache__/models.cpython-36.pyc differ
[1mdiff --git a/practice/models.py b/practice/models.py[m
[1mindex 51f665d..b48b352 100644[m
[1m--- a/practice/models.py[m
[1m+++ b/practice/models.py[m
[36m@@ -1,4 +1,5 @@[m
 from django.db import models[m
[32m+[m[32mfrom unicodedata import category[m
 [m
 [m
 # Create your models here.[m
[36m@@ -9,13 +10,8 @@[m [mclass Category(models.Model):[m
     def __str__(self):[m
         return (self.name)[m
     [m
[31m-class Product(models.Model):[m
[31m-    name = models.CharField(max_length=50)[m
[31m-    price = models.IntegerField(default=1)[m
[31m-    category = models.ForeignKey(Category,on_delete=models.CASCADE)[m
[32m+[m
     [m
[31m-    def __str__(self):[m
[31m-        return (self.name)[m
 [m
 class Order(models.Model):[m
     date_order = models.DateTimeField('date order')[m
[36m@@ -23,4 +19,70 @@[m [mclass Order(models.Model):[m
     number = models.IntegerField(default=1)[m
     category = models.ForeignKey(Category,on_delete=models.CASCADE)[m
 [m
[32m+[m
[32m+[m[32m#     ‚óè    Create a custom QuerySet that only get products with Category = ‚ÄúCar‚Äù[m
[32m+[m[32mclass ProductQuerySet(models.QuerySet):[m
[32m+[m[32m    def get_product_car(self):[m
[32m+[m[32m#         return self.only("category_id","category").filter(name="car")[m
[32m+[m[32m        return self.filter(number=12)[m
[32m+[m
[32m+[m[32m# ‚óè    Create a custom Manager that only get products have quantity > 5[m
[32m+[m[32mclass ProductManager(models.Manager):[m
[32m+[m[32m#     def get_product(self):[m
[32m+[m[32m#         from django.db import connection[m
[32m+[m[32m#         with connection.cursor() as cursor:[m
[32m+[m[32m#             cursor.execute("""[m
[32m+[m[32m#             SELECT id,name,price,category_id,number FROM `practice_product`[m[41m [m
[32m+[m[32m#             WHERE number>5""")[m
[32m+[m[32m#[m[41m             [m
[32m+[m[32m#             list_product = [][m
[32m+[m[32m#             for row in cursor.fetchall():[m
[32m+[m[32m#                 product = self.model(id=row[0],name=row[1],price=row[2],category=row[3])[m
[32m+[m[32m#                 product.number = row[4][m
[32m+[m[32m#                 list_product.append(product)[m
[32m+[m[32m#[m[41m                 [m
[32m+[m[32m#         return list_product[m
[32m+[m
[32m+[m[32m    def get_product(self):[m
[32m+[m[32m        from django.db import connection[m
[32m+[m[32m        with connection.cursor() as cursor:[m
[32m+[m[32m            cursor.execute("""SELECT * FROM practice_product""")[m
[32m+[m[41m    [m
[32m+[m[32m            list_product=[][m
[32m+[m[32m            for row in cursor.fetchall():[m
[32m+[m[32m                product = self.model(id=row[0],name=row[1],price=row[2],category=row[3])[m
[32m+[m[32m                list_product.append(product)[m
     [m
[32m+[m[32m        return list_product[m
[32m+[m[41m    [m
[32m+[m[32m    def get_product_car(self):[m
[32m+[m[32m        return self.get_queryset().get_product_car()[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mclass Product(models.Model):[m
[32m+[m[32m    name = models.CharField(max_length=50)[m
[32m+[m[32m    price = models.IntegerField(default=1)[m
[32m+[m[32m    category = models.ForeignKey(Category,on_delete=models.CASCADE)[m
[32m+[m[32m    number = models.IntegerField(default=1)[m
[32m+[m[32m    manage = ProductManager()[m
[32m+[m[41m    [m
[32m+[m[32m    # do ƒë√£ custom manager --> d√πng api ƒë∆∞[m
[32m+[m[32m    objects = models.Manager()[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        return (self.name)[m
[32m+[m[41m    [m
[32m+[m[32m    def get_object_all(self):[m
[32m+[m[32m        return Product.objects.all()[m
[32m+[m
[32m+[m[32mclass PRawSql():[m
[32m+[m[32m    def get(self):[m
[32m+[m[32m# ‚óè    Try to use Raw SQL to get products with Category = ‚ÄúCar‚Äù[m
[32m+[m[32m        product_list = Product.objects.raw("""[m[41m [m
[32m+[m[32m        SELECT practice_product.id,practice_product.name FROM `practice_product` INNER join practice_category on practice_category.id = practice_product.category_id[m[41m [m
[32m+[m[32m            WHERE  practice_category.name='car'""")[m
[32m+[m[41m         [m
[32m+[m[32m        return product_list[m
[32m+[m[41m         [m
\ No newline at end of file[m
